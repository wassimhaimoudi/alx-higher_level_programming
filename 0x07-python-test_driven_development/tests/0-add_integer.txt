The ``0-add_integer`` module

Using ``add_integer``

Import the module function

>>> add_integer = __import__('0-add_integer').add_integer

Add two normal integers

>>> add_integer(10, 2)
12

Add two integers of opposite signs

>>> add_integer(10, -2)
8

Add two negative ints

>>> add_integer(-9, -3)
-12

Only pass one positional parameter

>>> add_integer(0)
98

Add two floats

>>> add_integer(10.23, 3.33)
13

Add int and float

>>> add_integer(10.02, 2)
12

>>> add_integer('hello', 29)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 19, in add_integer
    raise TypeError('a must be an integer')
TypeError: a must be an integer
>>> add_integer('hello', 'world')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 19, in add_integer
    raise TypeError('a must be an integer')
TypeError: a must be an integer
>>> add_integer(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 19, in add_integer
    raise TypeError('a must be an integer')
TypeError: a must be an integer
